name: Android Deploy

on:
  workflow_dispatch:
    inputs:
      release_environment:
        description: 'env'
        type: choice
        options:
          - qa
          - dev
          - prod
        required: true
      release_version:
        description: 'version'
        type: string
        required: true

run-name: ${{ inputs.release_environment }} - ${{ inputs.release_version }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.release_environment }}
    strategy:
      matrix:
        build-type: [ apk, aab ]
        include:
          - environment: prod
            keystore_name: beer_release.keystore
          - environment: qa,dev
            keystore_name: beer.keystore
    steps:
      - uses: actions/checkout@v4
        name: set up JDK 17
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create secure.properties
        run: echo "${{ secrets.SECURE_PROPERTIES }}" | base64 --decode > secure.properties

      - name: Create keystore properties
        run: echo "${{ secrets.RELEASE_KEYSTORE_PROPERTIES }}" | base64 --decode > keystore.properties

      - name: Decode And Save Keystore Base64 # app.keystoer.jks 키 값을 디코드 해서 app/dev_ksystore.jks로 저장한다. (생략 가능)
        run: echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 --decode > app/${{ matrix.keystore_name }}

      - name: Create google-services.json # 환경변수(GOOGLE_SERVICES_JSON) 값의 내용을 기반으로 `app/google-services.json`를 만든다.
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > app/google-services.json


#      - name: Find commits from last VERSION_NAME change to HEAD
#        id: find_version_commit
#        run: |
#          LAST_VERSION_COMMIT=$(git log -G "VERSION_NAME = \"([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?\"" -- buildSrc/src/main/kotlin/AndroidConfig.kt | grep '^commit' | head -n 1 | awk '{print $2}')
#          if [ -z "$LAST_VERSION_COMMIT" ]; then
#            echo "No previous VERSION_NAME change found, using all commits."
#            COMMIT_MESSAGES=$(git log --pretty=format:"%s" --abbrev-commit)
#          else
#            echo "VERSION_NAME last changed in commit $LAST_VERSION_COMMIT."
#            COMMIT_MESSAGES=$(git log $LAST_VERSION_COMMIT..HEAD --pretty=format:"%s" --abbrev-commit | tr '\n' ' | ')
#          fi
#          # Save the last commit and commit messages as separate environment variables
#          echo "LAST_VERSION_COMMIT=$LAST_VERSION_COMMIT" >> $GITHUB_ENV
#          echo "COMMIT_MESSAGES=$COMMIT_MESSAGES" >> $GITHUB_ENV


#      - name: Extract changelog from commits since the last VERSION change
#        id: changelog
#        run: |
#          if [ -z "${{ env.LAST_VERSION_COMMIT }}" ]; then
#            echo "No previous VERSION change found, extracting all commits."
#            CHANGELOG=$(git log --pretty=format:"%h - %s" --abbrev-commit)
#          else
#            echo "Last VERSION change found at commit ${{ env.LAST_VERSION_COMMIT }}. Extracting commits since this change."
#            CHANGELOG=$(git log ${{ env.LAST_VERSION_COMMIT }}..HEAD --pretty=format:"%s" --abbrev-commit)
#          fi
#          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
#          echo "$CHANGELOG" >> $GITHUB_ENV
#          echo "EOF" >> $GITHUB_ENV


      - name: Update VERSION_NAME & Commit change
        run: |
          chmod +x ./scripts/version_commit.sh
          ./scripts/version_commit.sh
          
      #      - name: Create Release Branch
      #        run: |
      #          version_part=$(echo "${{inputs.release_version}}" | cut -d'-' -f1)
      #          suffix_part=$(echo "${{inputs.release_version}}" | cut -d'-' -f2)
      #
      #          # Check if the branch exists
      #          if git rev-parse --verify release/${version_part} >/dev/null 2>&1; then
      #            echo "Branch release/${version_part} already exists. Switching to it."
      #            git switch release/${version_part}
      #          else
      #            echo "Branch release/${version_part} does not exist. Creating and switching to it."
      #            git checkout -b release/${version_part}
      #          fi
      #
      #          git config --local user.email "action@github.com"
      #          git config --local user.name "GitHub Action"
      #
      #          # Update VERSION_NAME in Versions.kt
      #          sed -ie 's/const val VERSION_NAME = ".*"/const val VERSION_NAME = "${{inputs.release_version}}"/' buildSrc/src/main/kotlin/AndroidConfig.kt
      #
      #          git commit -m "version change ${{inputs.release_version}}" -a
      #          git push --set-upstream origin release/${version_part}

      # apk
#      - name: Build with Gradle
#        run: ./gradlew clean assemblePlayStoreRelease

      - name: Build APK
        if: matrix.build-type == 'apk'
        run: ./gradlew clean assemblePlayStoreRelease

#      - name: Build tools version
#        run: |
#          BUILD_TOOLS_VERSION=$(grep -oP 'const val BUILD_TOOLS_VERSION = "\K[0-9.]+' buildSrc/src/main/kotlin/AndroidConfig.kt)
#          echo "BUILD_TOOLS_VERSION=$BUILD_TOOLS_VERSION" >> $GITHUB_ENV

#      - name: Check signed apk
#        run: |
#          ${ANDROID_HOME}/build-tools/${{ env.BUILD_TOOLS_VERSION }}/apksigner verify --verbose app/build/outputs/apk/playStore/release/app-playStore-release.apk

#      - name: Sign APK
#        id: sign-apk
#        uses: r0adkll/sign-android-release@v1
#        with:
#          releaseDirectory: app/build/outputs/apk/playStore/release
#          signingKeyBase64: ${{ secrets.RELEASE_KEYSTORE }}
#          alias: ${{ secrets.ALIAS }}
#          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
#          keyPassword: ${{ secrets.KEY_PASSWORD }}
#        env:
#          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOLS_VERSION }}

#      - name: Check signed apk
#        run: |
#          ${ANDROID_HOME}/build-tools/${{ env.BUILD_TOOLS_VERSION }}/apksigner verify --verbose app/build/outputs/apk/playStore/release/app-playStore-release.apk

      - name: Upload Release Build to APK Artifacts
        if: matrix.build-type == 'apk'
        uses: actions/upload-artifact@v4
        with:
          name: android-beer-itda.apk
          path: app/build/outputs/apk/playStore/release
          if-no-files-found: error


      - name: Print directory list
        run: ls -R app/build/outputs
        if: always()

      #      - name: Upload artifact to Firebase App Distribution for APK
      #        uses: wzieba/Firebase-Distribution-Github-Action@v1
      #        with:
      #          appId: ${{secrets.FIREBASE_APP_ID}}
      #          serviceCredentialsFileContent: ${{ secrets.FIREBASE_CREDENTIAL_FILE_CONTENT }}
      #          groups: android-testers
      #          file: app/build/outputs/apk/playStore/release/app-playStore-release.apk
      #          debug: true
      #

      # aab
      - name: Build with Gradle
        run: ./gradlew clean bundlePlayStoreRelease

#      - name: Check signed aab
#        run: jarsigner -verify -verbose -certs app/build/outputs/bundle/playStoreRelease/app-playStore-release.aab

#      - name: Sign AAB
#        id: sign-aab
#        uses: r0adkll/sign-android-release@v1
#        with:
#          releaseDirectory: app/build/outputs/bundle/playStoreRelease
#          signingKeyBase64: ${{ secrets.RELEASE_KEYSTORE }}
#          alias: ${{ secrets.ALIAS }}
#          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
#          keyPassword: ${{ secrets.KEY_PASSWORD }}

#      - name: Check signed aab
#        run: jarsigner -verify -verbose -certs app/build/outputs/bundle/playStoreRelease/app-playStore-release.aab

      - name: Upload Release Build to AAB Artifacts
        if: matrix.build-type == 'aab'
        uses: actions/upload-artifact@v4
        with:
          name: android-beer-itda.aab
          path: app/build/outputs/bundle/playStoreRelease
          if-no-files-found: error

      - name: Print directory list
        run: ls -R app/build/outputs
        if: always()

      #      - name: Create Github Release
      #        uses: softprops/action-gh-release@v1
      #        with:
      #          generate_release_notes: true
      #          files: |
      #            android/app/build/outputs/apk/release/app-release.apk

      #      - name: Upload artifact to Firebase App Distribution for apk
      #        uses: wzieba/Firebase-Distribution-Github-Action@v1
      #        with:
      #          appId: ${{secrets.FIREBASE_APP_ID}}
      #          serviceCredentialsFileContent: ${{ secrets.FIREBASE_CLI_KEY }}
      #          groups: tester
      #          file: android/app/build/outputs/apk/release/app-release.apk

      - name: Generate release notes file
        run: |
          echo "${{ env.CHANGELOG }}" >> release_notes.txt

      - name: Print directory list
        run: ls -R
        if: always()

      - name: Upload artifact to Firebase App Distribution for AAB
        if: matrix.build-type == 'aab'
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_CREDENTIAL_FILE_CONTENT }}
          groups: android-testers
          file: app/build/outputs/bundle/playStoreRelease/app-playStore-release.aab
          releaseNotes: ${{ env.CHANGELOG }}

      - name: Create service_account.json
        id: createServiceAccount
        if: ${{ inputs.release_environment }} == 'prod'
        run: echo '${{ secrets.SERVICE_ACCOUNT_JSON }}' | base64 --decode > service_account.json

      - name: Deploy to Play Store (BETA)
        id: deploy
        uses: r0adkll/upload-google-play@v1.0.15
        if: ${{ inputs.release_environment }} == 'prod'
        with:
          serviceAccountJson: service_account.json
          packageName: com.ddd4.synesthesia.beer
          track: beta1
          releaseFiles: app/build/outputs/bundle/playStoreRelease/app-playStore-release.aab

      - uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: custom
          icon_url: 'https://source.android.com/static/docs/setup/images/Android_symbol_green_RGB.png?hl=ko'
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              "title": "안드로이드 배포 봇",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<@ULF2E19T3>\n*안녕하세요 :smile:*\n안드로이드 <https://console.firebase.google.com/project/beer-432f8/appdistribution/app/android:com.ddd4.synesthesia.beer/releases|*${{ inputs.release_version }}*>버전이 배포되었습니다. \n\n *감사합니다*"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*작업내용*\n ${{ env.COMMIT_MESSAGES }}"
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://s3-media3.fl.yelpcdn.com/bphoto/c7ed05m9lC2EmA3Aruue7A/o.jpg",
                    "alt_text": "alt text for image"
                  }
                },
                {
                  "type": "divider"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}